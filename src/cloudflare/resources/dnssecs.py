# File generated from our OpenAPI spec by Stainless.

from __future__ import annotations

from typing import Type, cast
from typing_extensions import Literal

import httpx

from ..types import DNSSECGetResponse, DNSSECUpdateResponse, dnssec_update_params
from .._types import NOT_GIVEN, Body, Query, Headers, NotGiven
from .._utils import maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from .._wrappers import ResultWrapper
from .._base_client import (
    make_request_options,
)

__all__ = ["DNSSECs", "AsyncDNSSECs"]


class DNSSECs(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> DNSSECsWithRawResponse:
        return DNSSECsWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> DNSSECsWithStreamingResponse:
        return DNSSECsWithStreamingResponse(self)

    def update(
        self,
        zone_id: str,
        *,
        dnssec_multi_signer: bool | NotGiven = NOT_GIVEN,
        dnssec_presigned: bool | NotGiven = NOT_GIVEN,
        status: Literal["active", "disabled"] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> DNSSECUpdateResponse:
        """
        Enable or disable DNSSEC.

        Args:
          zone_id: Identifier

          dnssec_multi_signer: If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
              to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
              records (except those automatically generated by Cloudflare) to be added to the
              zone.

              See
              [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
              for details.

          dnssec_presigned: If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
              signatures from an external provider, without requiring Cloudflare to sign any
              records on the fly.

              Note that this feature has some limitations. See
              [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
              for details.

          status: Status of DNSSEC, based on user-desired state and presence of necessary records.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not zone_id:
            raise ValueError(f"Expected a non-empty value for `zone_id` but received {zone_id!r}")
        return self._patch(
            f"/zones/{zone_id}/dnssec",
            body=maybe_transform(
                {
                    "dnssec_multi_signer": dnssec_multi_signer,
                    "dnssec_presigned": dnssec_presigned,
                    "status": status,
                },
                dnssec_update_params.DNSSECUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                post_parser=ResultWrapper._unwrapper,
            ),
            cast_to=cast(Type[DNSSECUpdateResponse], ResultWrapper[DNSSECUpdateResponse]),
        )

    def get(
        self,
        zone_id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> DNSSECGetResponse:
        """
        Details about DNSSEC status and configuration.

        Args:
          zone_id: Identifier

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not zone_id:
            raise ValueError(f"Expected a non-empty value for `zone_id` but received {zone_id!r}")
        return self._get(
            f"/zones/{zone_id}/dnssec",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                post_parser=ResultWrapper._unwrapper,
            ),
            cast_to=cast(Type[DNSSECGetResponse], ResultWrapper[DNSSECGetResponse]),
        )


class AsyncDNSSECs(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncDNSSECsWithRawResponse:
        return AsyncDNSSECsWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncDNSSECsWithStreamingResponse:
        return AsyncDNSSECsWithStreamingResponse(self)

    async def update(
        self,
        zone_id: str,
        *,
        dnssec_multi_signer: bool | NotGiven = NOT_GIVEN,
        dnssec_presigned: bool | NotGiven = NOT_GIVEN,
        status: Literal["active", "disabled"] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> DNSSECUpdateResponse:
        """
        Enable or disable DNSSEC.

        Args:
          zone_id: Identifier

          dnssec_multi_signer: If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
              to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
              records (except those automatically generated by Cloudflare) to be added to the
              zone.

              See
              [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
              for details.

          dnssec_presigned: If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
              signatures from an external provider, without requiring Cloudflare to sign any
              records on the fly.

              Note that this feature has some limitations. See
              [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
              for details.

          status: Status of DNSSEC, based on user-desired state and presence of necessary records.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not zone_id:
            raise ValueError(f"Expected a non-empty value for `zone_id` but received {zone_id!r}")
        return await self._patch(
            f"/zones/{zone_id}/dnssec",
            body=maybe_transform(
                {
                    "dnssec_multi_signer": dnssec_multi_signer,
                    "dnssec_presigned": dnssec_presigned,
                    "status": status,
                },
                dnssec_update_params.DNSSECUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                post_parser=ResultWrapper._unwrapper,
            ),
            cast_to=cast(Type[DNSSECUpdateResponse], ResultWrapper[DNSSECUpdateResponse]),
        )

    async def get(
        self,
        zone_id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> DNSSECGetResponse:
        """
        Details about DNSSEC status and configuration.

        Args:
          zone_id: Identifier

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not zone_id:
            raise ValueError(f"Expected a non-empty value for `zone_id` but received {zone_id!r}")
        return await self._get(
            f"/zones/{zone_id}/dnssec",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                post_parser=ResultWrapper._unwrapper,
            ),
            cast_to=cast(Type[DNSSECGetResponse], ResultWrapper[DNSSECGetResponse]),
        )


class DNSSECsWithRawResponse:
    def __init__(self, dnssecs: DNSSECs) -> None:
        self._dnssecs = dnssecs

        self.update = to_raw_response_wrapper(
            dnssecs.update,
        )
        self.get = to_raw_response_wrapper(
            dnssecs.get,
        )


class AsyncDNSSECsWithRawResponse:
    def __init__(self, dnssecs: AsyncDNSSECs) -> None:
        self._dnssecs = dnssecs

        self.update = async_to_raw_response_wrapper(
            dnssecs.update,
        )
        self.get = async_to_raw_response_wrapper(
            dnssecs.get,
        )


class DNSSECsWithStreamingResponse:
    def __init__(self, dnssecs: DNSSECs) -> None:
        self._dnssecs = dnssecs

        self.update = to_streamed_response_wrapper(
            dnssecs.update,
        )
        self.get = to_streamed_response_wrapper(
            dnssecs.get,
        )


class AsyncDNSSECsWithStreamingResponse:
    def __init__(self, dnssecs: AsyncDNSSECs) -> None:
        self._dnssecs = dnssecs

        self.update = async_to_streamed_response_wrapper(
            dnssecs.update,
        )
        self.get = async_to_streamed_response_wrapper(
            dnssecs.get,
        )
